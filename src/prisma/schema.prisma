// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String          @id @default(cuid())
  firstName       String?
  lastName        String?
  username        String          @unique
  displayName     String?
  email           String?         @unique
  profilePicture  String
  password        String?         @unique
  appleId         String?         @unique
  googleId        String?         @unique
  facebookId      String?         @unique
  Comment         Comment[]
  Like            Like[]
  UserCircle      UserCircle[]
  Circle          Circle[]
  Album           Album[]
  Photos          Photo[]
  requestsSent    FriendRequest[] @relation("requester")
  requestReceived FriendRequest[] @relation("requestee")
  friends         Friend[]        @relation("friend_1")
  friendOf        Friend[]        @relation("friend_2")
  circleInvites   CircleInvite[]  @relation("circle_invitee")
}

model Friend {
  friend_1      User   @relation("friend_1", fields: [friend_1_name], references: [username])
  friend_1_name String
  friend_2      User   @relation("friend_2", fields: [friend_2_name], references: [username])
  friend_2_name String

  @@id([friend_1_name, friend_2_name])
}

model Circle {
  id         String         @id @default(cuid())
  owner      User           @relation(fields: [ownerId], references: [username])
  ownerId    String
  name       String
  picture    String
  UserCircle UserCircle[]
  albums     Album[]
  invites    CircleInvite[] @relation("circle")
  isPublic   Boolean        @default(false)
}

model Album {
  id        String    @id @default(cuid())
  owner     User      @relation(fields: [ownerName], references: [username])
  ownerName String
  name      String
  likeCount Int @default(0)
  likes     Like[]
  photos    Photo[]
  comments  Comment[]
  circle    Circle    @relation(fields: [circleId], references: [id], onDelete: Cascade)
  circleId  String
}

model Photo {
  id      String @id @default(cuid())
  src     String
  album   Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId String
  poster  User   @relation(fields: [userId], references: [username])
  userId  String
}

model Comment {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  message         String?
  user            User?      @relation(fields: [userId], references: [username])
  userId          String?
  likeCount       Int       @default(0)
  likes           Like[]
  album           Album     @relation(fields: [albumId], references: [id])
  albumId         String
  replies         Comment[] @relation("replies")
  parent Comment? @relation("replies", fields: [parentId], references: [id])
  parentId String?
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [username])
  userId    String
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  album     Album?   @relation(fields: [albumId], references: [id])
  albumId   String?
}

model UserCircle {
  user     User   @relation(fields: [username], references: [username])
  username String
  circle   Circle @relation(fields: [circleId], references: [id], onDelete: Cascade)
  circleId String

  @@id([username, circleId])
}

model CircleInvite {
  invitee          User   @relation("circle_invitee", fields: [invitee_username], references: [username])
  invitee_username String
  circle           Circle @relation("circle", fields: [circleId], references: [id])
  circleId         String

  @@id([invitee_username, circleId])
}

model FriendRequest {
  requester     User    @relation("requester", fields: [requesterName], references: [username])
  requesterName String
  requestee     User    @relation("requestee", fields: [requesteeName], references: [username])
  requesteeName String
  status        Boolean

  @@id([requesterName, requesteeName])
}
